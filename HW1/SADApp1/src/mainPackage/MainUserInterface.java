package mainPackage;


import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author ryan
 */
public class MainUserInterface extends javax.swing.JApplet implements iPushPull {
    private String stringFormatType = "defaul";
    private String sortingFormatType = "default";
    private PipedOutputStream pipeOutToFormatter = null;
    private PipedInputStream pipeInputForFormatter = null;
    private static PipedInputStream pipeIn = new PipedInputStream();
    private int numberOfLines;

    /**
     *
     * @param recievedStringList
     */
    public void setRecievedStringList(ArrayList<String> recievedStringList) {
        String temp = "";
        for(int i = 0; i < recievedStringList.size(); i++) {
            temp += recievedStringList.get(i) + "\r\n";
        }
        textArea2.setText(temp);
        submitButton.setEnabled(true);
    }

    /**
     *get string from interface
     */
    public static ContainerObjects container = new ContainerObjects();

    /**
     *get instance of interface
     * @param numberOfLines
     */
    public void setNumberOfLines(int numberOfLines) {
        this.numberOfLines = numberOfLines;
    }

    /**
     *set number of lines
     * @param pipeIn
     */
    public static void setPipeIn(PipedInputStream pipeIn) {
        MainUserInterface.pipeIn = pipeIn;
    }
    
    /**
     *set pipe in
     * @return
     */
    public MainUserInterface getMainUI() {
        return this;
    }

    /**
     *get main ui
     * @return
     */
    public static PipedInputStream getPipeIn() {
        return pipeIn;
    }
    
    /**
     *return pipe in
     * @return
     */
    public MainUserInterface getThis() {
        return this;
    }
    private iStringFormat stringFormat;
    private iSortedList sortingFormat;
    /**
     * Initializes the applet MainUserInterface
     */
    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        

        /* Create and display the applet */
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                public void run() {
                    initComponents();
                    initCustomCode();
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the init() method to initialize the
     * form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textArea1 = new java.awt.TextArea();
        textArea2 = new java.awt.TextArea();
        clearButton = new javax.swing.JButton();
        submitButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));

        clearButton.setText("Clear");

        submitButton.setText("Submit");

        jLabel1.setText("Input Sentences");

        jLabel2.setText("Shifted sentences");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(submitButton)
                        .addGap(18, 18, 18)
                        .addComponent(clearButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(textArea2, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)))
                .addContainerGap(422, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(5, 5, 5)
                .addComponent(textArea2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 267, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearButton)
                    .addComponent(submitButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton submitButton;
    private java.awt.TextArea textArea1;
    private java.awt.TextArea textArea2;
    // End of variables declaration//GEN-END:variables

    /**
     *
     */
    @Override
    public void push() {
        try {
            //get the strings from the input text areas and push to the formatter
            String unformattedText = textArea1.getText();
            
            //initialize pipes for transporting to formatter
            //pipe in for formatter
            pipeInputForFormatter = new PipedInputStream();
            //pipe out from this class
            pipeOutToFormatter = new PipedOutputStream();
            pipeOutToFormatter.connect(pipeInputForFormatter);
            stringFormat = iStringFormat.createFormat(stringFormatType, pipeInputForFormatter);
            
            //stringFormat.setPipeIn(pipeInputForFormatter);

            //should probably have a new thread to handle writing the data into the formatter pipe?
            pipeOutToFormatter.write(unformattedText.getBytes());
            pipeOutToFormatter.flush(); //tells the inputPipe to read
            stringFormat.pull();
        } catch (IOException ex) {
            Logger.getLogger(MainUserInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void initCustomCode() {
        submitButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                submitButton.setEnabled(false);
              push();  
            }
        });
        
        clearButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                textArea1.setText(""+'\u0000');
                textArea2.setText(""+'\u0000');
            }
        });
//        pull();
        container.setUi(this);
    }

    @Override
    public void pull() {
        try {
            int i = 0;
            
            String recievedString = "";
            while(numberOfLines != i) {
                try {
                    byte[] b = new byte[pipeIn.available()];
                    pipeIn.read(b, 0, pipeIn.available());
                    int value;
                    for (int n = 0; n < b.length; n++) {
                        value = b[n];
                        recievedString += (char) value;
                    }
                } catch (IOException ex) {
                    Logger.getLogger(SorterTypes.class.getName()).log(Level.SEVERE, null, ex);
                }
                i++;
            }
            pipeIn.close();
            textArea2.setText(recievedString);
            submitButton.setEnabled(true);
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        } catch (IOException ex) {
            Logger.getLogger(MainUserInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
